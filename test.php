<?php
/**
 * Ollama Powerhouse Dashboard (Hybrid Engine)
 * Merges file-based server management with a full-featured web UI.
 * @author 10x Evolved Ai Engineer
 */

// start of Configuration Block
define('DASHBOARD_TITLE', 'Ollama Powerhouse');
define('MODELS_DIR', __DIR__ . '/models');
define('MODEL_EXTENSIONS', ['gguf', 'bin']);
define('PID_FILE', __DIR__ . '/ollama.pid');
define('OLLAMA_LOG_FILE', __DIR__ . '/ollama.log');
define('CHATS_DIR', __DIR__ . '/chats');
define('SETTINGS_FILE', __DIR__ . '/ollama-dashboard-settings.json');
// end of Configuration Block

// start of Helper Functions
function get_settings_with_auth(): array {
    if (!file_exists(SETTINGS_FILE)) {
        $default_preset = [
            'id' => 'default_' . time(),
            'name' => 'Default (Llama3 Instruct)',
            'temperature' => '0.7',
            'repeat_penalty' => '1.1',
            'top_k' => '40',
            'top_p' => '0.9',
            'system' => "You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.\n\nIf a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."
        ];
        $default_settings = [
            'theme' => 'dark',
            'api_password' => '',
            'title_generation_model' => 'llama3:latest',
            'presets' => [$default_preset],
            'active_preset_id' => $default_preset['id']
        ];
        file_put_contents(SETTINGS_FILE, json_encode($default_settings, JSON_PRETTY_PRINT));
        return $default_settings;
    }

    $settings_content = file_get_contents(SETTINGS_FILE);
    $settings = json_decode($settings_content, true);

    if (json_last_error() !== JSON_ERROR_NONE || !is_array($settings) || !isset($settings['presets']) || !is_array($settings['presets'])) {
        @unlink(SETTINGS_FILE);
        return get_settings_with_auth();
    }
    
    // ✨ Self-healing: ensure critical keys exist
    $defaults = [
        'theme' => 'dark',
        'api_password' => '',
        'title_generation_model' => 'llama3:latest',
        'presets' => [],
        'active_preset_id' => ''
    ];
    $settings = array_merge($defaults, $settings);
    if (empty($settings['presets'])) {
        $settings['presets'] = $defaults['presets'];
        @unlink(SETTINGS_FILE); // Corrupt, force regen on next load.
        return get_settings_with_auth();
    }
    if (empty($settings['active_preset_id']) || !in_array($settings['active_preset_id'], array_column($settings['presets'], 'id'))) {
        $settings['active_preset_id'] = $settings['presets'][0]['id'] ?? '';
    }

    return $settings;
}

function is_process_running($pid): bool {
    if (empty($pid)) return false;
    if (function_exists('posix_kill')) return @posix_kill(intval($pid), 0);
    return !empty(trim(shell_exec("ps -p " . escapeshellarg($pid) . " -o pid=")));
}

function is_ollama_server_responsive(): bool {
    $ch = curl_init('http://127.0.0.1:11434');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 2); curl_setopt($ch, CURLOPT_TIMEOUT, 3);
    curl_exec($ch); $code = curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch);
    return $code == 200;
}
// end of Helper Functions


// start of API Router
if (isset($_GET['action'])) {
    error_reporting(0); @ini_set('display_errors', 0);
    $settings = get_settings_with_auth();
    $api_password = $settings['api_password'] ?? '';
    $payload = json_decode(file_get_contents('php://input'), true) ?? [];

    if (in_array($_GET['action'], ['stream_task', 'stream_log'])) {
        $handler = $_GET['action'] . '_handler'; $handler($payload); exit;
    }
    
    if (!empty($api_password) && !in_array($_GET['action'], ['get_initial_state', 'get_server_status', 'get_system_info']) && ($_SERVER['REQUEST_METHOD'] === 'GET' ? ($_GET['auth'] ?? '') : ($payload['auth'] ?? '')) !== $api_password) {
        header('Content-Type: application/json'); http_response_code(401); echo json_encode(['status' => 'error', 'message' => 'Unauthorized.']); exit;
    }
    unset($payload['auth']);

    $action = $_GET['action'] ?? null;
    header('Content-Type: application/json');
    $response = [];
    switch ($action) {
        case 'get_initial_state': $response = get_initial_state(); break;
        case 'get_server_status': $response = check_status_api(); break;
        case 'get_system_info': $response = get_system_info(); break;
        case 'get_models_state': $response = ['installed_models' => list_models_api(), 'running_models' => get_running_models()]; break;
        case 'get_chat_list': $response = get_chat_history(); break;
        case 'stop_server': $response = stop_server_api(); break;
        case 'stop_all_tasks': $response = kill_all_ollama_api(); break;
        case 'run_diagnostics': $response = run_diagnostics(); break;
        case 'delete_model': $response = delete_model($payload['name'] ?? ''); break;
        case 'get_model_details': $response = get_model_details($payload['name'] ?? ''); break;
        case 'upload_gguf': $response = handle_gguf_upload(); break;
        case 'get_chat': $response = get_chat($payload['id'] ?? ''); break;
        case 'create_chat': $response = create_chat(); break;
        case 'delete_chat': $response = delete_chat($payload['id'] ?? ''); break;
        case 'update_chat': $response = update_chat($payload); break;
        case 'clear_all_chats': $response = clear_all_chats_api(); break;
        case 'save_settings': $response = save_settings($payload); break;
        case 'execute_api_command': $response = execute_api_command($payload); break;
        default: http_response_code(400); $response = ['status' => 'error', 'message' => 'Invalid action.'];
    }
    echo json_encode($response);
    exit;
}
// end of API Router


// start of Core Logic & API Functions
function get_initial_state(): array { $status = check_status_api(); return [ 'status' => $status, 'version' => $status['responsive'] ? get_ollama_version() : 'N/A', 'system_info' => get_system_info(), 'installed_models' => $status['responsive'] ? list_models_api() : [], 'running_models' => $status['responsive'] ? get_running_models() : [], 'chat_history' => get_chat_history(), 'settings' => get_settings_with_auth(), 'diagnostics' => get_auto_actions() ]; }
function check_status_api(): array { $status = ['running' => false, 'responsive' => false, 'pid' => null, 'status_text' => 'Stopped']; if (file_exists(PID_FILE)) { $pid = trim(file_get_contents(PID_FILE)); if (is_process_running($pid)) { $status['running'] = true; $status['pid'] = $pid; $status['responsive'] = is_ollama_server_responsive(); $status['status_text'] = $status['responsive'] ? 'Running' : 'Starting...'; } else { @unlink(PID_FILE); } } return $status; }
function get_ollama_version(): string { $version_string = shell_exec('ollama --version 2>/dev/null'); if (empty($version_string)) return 'Unknown'; preg_match('/version is ([\d\.]+)/', $version_string, $matches); return $matches[1] ?? 'Unknown'; }
function get_system_info(): array { $mem = ['total' => 0, 'free' => 0, 'used' => 0]; if (strncasecmp(PHP_OS, 'WIN', 3) !== 0 && function_exists('shell_exec')) { $free = shell_exec('free'); if(!empty($free)){ $free = (string)trim($free); $free_arr = explode("\n", $free); $mem_data = preg_split("/[\s]+/", $free_arr[1]); if(count($mem_data) > 3) { $mem['total'] = round($mem_data[1] / 1024 / 1024, 2); $mem['used'] = round($mem_data[2] / 1024 / 1024, 2); $mem['free'] = round($mem_data[3] / 1024 / 1024, 2); } } } return [ 'php_version' => PHP_VERSION, 'os' => php_uname('s'), 'web_user' => function_exists('exec') ? trim(exec('whoami')) : 'N/A', 'cpu_load' => function_exists('sys_getloadavg') ? (sys_getloadavg()[0] * 100) : null, 'memory' => $mem, 'disk_free' => function_exists('disk_free_space') ? round(disk_free_space(__DIR__) / 1e9, 2) : null, 'disk_total' => function_exists('disk_total_space') ? round(disk_total_space(__DIR__) / 1e9, 2) : null ]; }
function list_models_api(): array { $output = shell_exec('ollama list'); if (empty($output)) return []; $lines = array_filter(explode("\n", trim($output))); if (count($lines) < 2) return []; array_shift($lines); $models = []; foreach ($lines as $line) { $parts = preg_split('/\s{2,}/', trim($line)); if (count($parts) >= 4) { $model_details = json_decode(shell_exec('ollama show '.escapeshellarg($parts[0]).' --json'), true); $params = $model_details['details']['parameters'] ?? ''; preg_match('/(\w+)\s*=\s*\[?(\w+(?:_\w+)*)\]?/', $params, $matches); $quantization = isset($matches[2]) ? strtoupper($matches[2]) : 'F16'; $models[] = [ 'name' => $parts[0], 'id' => $parts[1], 'size' => (float) preg_replace('/[a-zA-Z]/', '', $parts[2]) * 1e9, 'modified' => $parts[3], 'details' => $model_details['details'] ?? ['family' => 'N/A'], 'quantization' => $quantization, ]; } } return $models; }
function get_running_models(): array { $output = shell_exec('ollama ps'); if (empty($output)) return []; $lines = array_filter(explode("\n", trim($output))); if (count($lines) < 2) return []; array_shift($lines); $running_models = []; foreach($lines as $line) { $parts = preg_split('/\s+/', $line); if(isset($parts[0])) $running_models[] = ['name' => $parts[0], 'id' => $parts[1], 'size' => $parts[2], 'pid' => $parts[4] ?? 'N/A']; } return $running_models; }
function delete_model(string $name): array { if (empty($name)) return ['status' => 'error', 'message' => 'Model name not provided.']; exec('ollama rm ' . escapeshellarg($name) . ' 2>&1', $output, $return_var); if ($return_var === 0) return ['status' => 'success', 'message' => "Model '{$name}' deleted."]; return ['status' => 'error', 'message' => "Failed to delete model '{$name}'.", 'details' => implode("\n", $output)]; }
function get_model_details(string $name): array { if (empty($name) || !is_ollama_server_responsive()) return ['status' => 'error', 'message' => 'Server offline or model name missing.']; $details = json_decode(shell_exec('ollama show ' . escapeshellarg($name) . ' --json'), true); return ['status' => 'success', 'details' => $details]; }
function handle_gguf_upload() : array { if (!isset($_FILES['ggufFile'])) return ['status' => 'error', 'message' => 'No file uploaded.']; if (!is_dir(MODELS_DIR)) @mkdir(MODELS_DIR, 0755, true); $file = $_FILES['ggufFile']; if ($file['error'] !== UPLOAD_ERR_OK) return ['status' => 'error', 'message' => 'File upload error: ' . $file['error']]; $destination = MODELS_DIR . '/' . basename($file['name']); if (move_uploaded_file($file['tmp_name'], $destination)) return ['status' => 'success', 'message' => 'File uploaded. It will be imported on next server start/sync.']; return ['status' => 'error', 'message' => 'Failed to move uploaded file.']; }
function stop_server_api(): array { if (!file_exists(PID_FILE)) return ['status' => 'info', 'message' => 'Server not managed by this script (no PID file).']; $pid = trim(file_get_contents(PID_FILE)); if (is_process_running($pid)) { shell_exec("kill {$pid} 2>/dev/null"); sleep(1); if (is_process_running($pid)) shell_exec("kill -9 {$pid} 2>/dev/null"); } @unlink(PID_FILE); return ['status' => 'success', 'message' => 'Managed server stopped.']; }
function kill_all_ollama_api(): array { $find_pids_command = "ps aux | grep ollama | grep -v grep | awk '{print $2}'"; $pids_string = trim(shell_exec($find_pids_command) ?? ''); if (!empty($pids_string)) shell_exec("kill -9 " . $pids_string); if (file_exists(PID_FILE)) @unlink(PID_FILE); return ['status' => 'success', 'message' => 'All Ollama processes terminated.']; }
function execute_api_command(array $payload) : array { $endpoint = $payload['endpoint'] ?? ''; $json_payload = $payload['payload'] ?? '{}'; if (empty($endpoint)) return ['status' => 'error', 'message' => 'Endpoint cannot be empty.']; $command = "curl -s -X POST http://127.0.0.1:11434/api/{$endpoint} -d " . escapeshellarg($json_payload); $result = shell_exec($command); $json_result = json_decode($result, true); if (json_last_error() === JSON_ERROR_NONE) return ['status' => 'success', 'result' => $json_result, 'curl' => $command]; return ['status' => 'success', 'result' => $result, 'curl' => $command]; }
function run_diagnostics(): array { $results = []; $whoami = trim(shell_exec('whoami')); $results[] = ['check' => 'PHP Version', 'expected' => '>= 7.4', 'actual' => PHP_VERSION, 'status' => version_compare(PHP_VERSION, '7.4.0', '>=') ? 'OK' : 'FAIL', 'fixable' => false]; $results[] = ['check' => 'Ollama Command', 'expected' => 'Found', 'actual' => !empty(trim(shell_exec('command -v ollama'))), 'status' => !empty(trim(shell_exec('command -v ollama'))) ? 'OK' : 'FAIL', 'fixable' => true, 'fix_id' => 'install_ollama']; $results[] = ['check' => 'cURL Command', 'expected' => 'Found', 'actual' => !empty(trim(shell_exec('command -v curl'))), 'status' => !empty(trim(shell_exec('command -v curl'))) ? 'OK' : 'FAIL', 'fixable' => true, 'fix_id' => 'install_curl']; $results[] = ['check' => 'Web User', 'expected' => 'Identified', 'actual' => $whoami, 'status' => !empty($whoami) ? 'INFO' : 'WARN', 'fixable' => false]; foreach ([MODELS_DIR, CHATS_DIR, __DIR__] as $dir) { if (!is_dir($dir)) @mkdir($dir, 0755, true); $results[] = ['check' => "Dir Writable: " . basename($dir), 'expected' => 'Writable', 'actual' => is_writable($dir), 'status' => is_writable($dir) ? 'OK' : 'FAIL', 'fixable' => true, 'fix_id' => 'fix_permissions']; } $results[] = ['check' => 'shell_exec enabled', 'expected' => 'Enabled', 'actual' => function_exists('shell_exec'), 'status' => function_exists('shell_exec') ? 'OK' : 'FAIL', 'fixable' => false]; return $results; }
function get_auto_actions(): array { $actions = []; if (strpos(php_uname('s'), 'Linux') !== false || strpos(php_uname('s'), 'Darwin') !== false) { $actions[] = ['id' => 'install_ollama', 'title' => '📦 Install Ollama', 'description' => 'Downloads and runs the official Ollama installation script (requires sudo).', 'command' => "curl -fsSL https://ollama.com/install.sh | sh"]; } $pkg_manager_cmd = "if [ -x \"$(command -v apt)\" ]; then sudo apt update && sudo apt install -y %s; elif [ -x \"$(command -v yum)\" ]; then sudo yum install -y %s; elif [ -x \"$(command -v brew)\" ]; then brew install %s; else echo \"No supported package manager found.\"; fi"; $actions[] = ['id' => 'install_curl', 'title' => '📦 Install cURL', 'description' => 'Installs cURL via a supported package manager.', 'command' => sprintf($pkg_manager_cmd, 'curl', 'curl', 'curl')]; $actions[] = ['id' => 'fix_permissions', 'title' => '🛠️ Fix Directory Permissions', 'description' => 'Sets correct owner/permissions for data directories.', 'command' => "chown -R \$(whoami) " . escapeshellarg(MODELS_DIR) . " " . escapeshellarg(CHATS_DIR) . " && chmod -R 755 " . escapeshellarg(MODELS_DIR) . " " . escapeshellarg(CHATS_DIR)]; $actions[] = ['id' => 'clear_ollama_log', 'title' => '🧹 Clear Ollama Log', 'description' => 'Truncates the ollama.log file in the script directory.', 'command' => "truncate -s 0 " . escapeshellarg(OLLAMA_LOG_FILE)]; return $actions; }

function stream_log_handler() {
    header('Content-Type: text/event-stream'); header('Cache-Control: no-cache'); header('Connection: keep-alive'); ob_end_flush();
    $send = function($data) { echo "data: " . json_encode($data) . "\n\n"; if(ob_get_level() > 0) ob_flush(); flush(); };
    if (!file_exists(OLLAMA_LOG_FILE)) { $send(['log' => 'Log file does not exist.']); $send(['done' => true]); exit; }
    $last_pos = filesize(OLLAMA_LOG_FILE); $send(['log' => file_get_contents(OLLAMA_LOG_FILE)]);
    while (true) {
        if (connection_aborted()) break;
        clearstatcache(); $current_size = file_exists(OLLAMA_LOG_FILE) ? filesize(OLLAMA_LOG_FILE) : 0;
        if ($current_size > $last_pos) {
            $fp = fopen(OLLAMA_LOG_FILE, 'r'); fseek($fp, $last_pos);
            while ($line = fgets($fp)) { $send(['log' => rtrim($line), 'append' => true]); }
            $last_pos = ftell($fp); fclose($fp);
        } else if ($current_size < $last_pos) { $last_pos = 0; $send(['log' => file_get_contents(OLLAMA_LOG_FILE), 'append' => false]); }
        sleep(1);
    }
}
function stream_task_handler(array $payload): void {
    header('Content-Type: text/event-stream'); header('Cache-Control: no-cache'); header('Connection: keep-alive'); ob_end_flush();
    $send = function($data) { echo "data: " . json_encode($data) . "\n\n"; if(ob_get_level() > 0) ob_flush(); flush(); };
    $settings = get_settings_with_auth();
    if ($_SERVER['REQUEST_METHOD'] === 'GET') {
        $task_type = $_GET['task_type'] ?? ''; $data = json_decode($_GET['payload'] ?? '{}', true);
        if (!empty($settings['api_password']) && ($_GET['auth'] ?? '') !== $settings['api_password']) { $send(['error' => 'Unauthorized.']); $send(['done' => true]); exit; }
    } else { $task_type = $payload['task_type'] ?? ''; $data = $payload['data'] ?? []; }
    
    $command = '';
    switch ($task_type) {
        case 'start_and_import':
            if (file_exists(PID_FILE) && is_process_running(trim(file_get_contents(PID_FILE)))) { $send(['log' => '❌ Server already running.']); break; }
            $send(['log' => '🚀 Launching Ollama server...']);
            $pid = trim(shell_exec("nohup ollama serve > " . escapeshellarg(OLLAMA_LOG_FILE) . " 2>&1 & echo $!"));
            if (empty($pid)) { $send(['log' => '❌ CRITICAL ERROR: Failed to launch process.']); break; } file_put_contents(PID_FILE, $pid);
            $send(['log' => "⏳ Process launched with PID: $pid. Waiting for API..."]); sleep(5);
            if (!is_process_running($pid) || !is_ollama_server_responsive()) { $send(['log' => '❌ CRITICAL ERROR: Server not responsive. Check log file.']); shell_exec("kill -9 {$pid} 2>/dev/null"); @unlink(PID_FILE); break; }
            $send(['log' => "✅ Server active. Syncing models from " . basename(MODELS_DIR) . "/..."]);
            $modelsInfo = get_managed_models_info();
            if (empty($modelsInfo)) { $send(['log' => '✅ No model files found to import.']); break; }
            $installed_models_raw = shell_exec('ollama list');
            foreach ($modelsInfo as $modelInfo) {
                $ollamaModelName = $modelInfo['name']; $send(['log' => "\n---\nProcessing: " . $modelInfo['basename']]);
                if (strpos($installed_models_raw, $ollamaModelName) !== false) { $send(['log' => "✅ '$ollamaModelName' already exists. Skipping."]); continue; }
                $send(['log' => "⚙️ Importing '$ollamaModelName'. This may take a while..."]);
                $modelfilePath = sys_get_temp_dir() . '/Modelfile.tmp'; file_put_contents($modelfilePath, "FROM " . escapeshellarg($modelInfo['path']));
                $createCommand = "ollama create " . escapeshellarg($ollamaModelName) . " -f " . escapeshellarg($modelfilePath);
                $proc = popen($createCommand . ' 2>&1', 'r'); while ($proc && !feof($proc)) { $line = fgets($proc); if ($line) $send(['log' => trim($line)]); } if ($proc) pclose($proc);
                if (file_exists($modelfilePath)) @unlink($modelfilePath);
            }
            $send(['log' => "\n---\n✨ Server sync process complete!"]);
            break;
        case 'chat':
        case 'generate_title':
            if (!is_ollama_server_responsive()) { $send(['error' => "Ollama server is not responsive."]); break; }
            $chat_payload = $data; $chat_payload['stream'] = true;
            $curl = curl_init(); curl_setopt_array($curl, [ CURLOPT_URL => 'http://127.0.0.1:11434/api/chat', CURLOPT_POST => true, CURLOPT_POSTFIELDS => json_encode($chat_payload), CURLOPT_HTTPHEADER => ['Content-Type: application/json'], CURLOPT_RETURNTRANSFER => false, CURLOPT_WRITEFUNCTION => function($curl_handle, $stream_data) use ($send, $task_type) { $lines = explode("\n", trim($stream_data)); foreach ($lines as $line) { if (empty(trim($line))) continue; $decoded_data = json_decode($line, true); if (json_last_error() === JSON_ERROR_NONE) { $decoded_data['stream_type'] = $task_type; $send($decoded_data); } else { $send(['error' => 'Received invalid data from Ollama API: ' . trim($line)]); } } return strlen($stream_data); } ]); @curl_exec($curl); if (curl_errno($curl)) { $send(['error' => 'cURL Error: ' . curl_error($curl)]); } curl_close($curl);
            break;
        case 'pull_model': case 'copy_model': case 'push_model': case 'purge_all': case 'execute_auto_action': // These are now handled client-side for better feedback
            $cmd_map = [ 'pull_model' => 'ollama pull ' . escapeshellarg($data['name'] ?? ''), 'copy_model' => 'ollama cp ' . escapeshellarg($data['source'] ?? '') . ' ' . escapeshellarg($data['destination'] ?? ''), 'push_model' => 'ollama push ' . escapeshellarg($data['destination'] ?? ''), 'purge_all' => "ollama list | awk 'NR>1 {print $1}' | xargs -L1 ollama rm", ];
            if ($task_type === 'execute_auto_action') { $actions = get_auto_actions(); foreach ($actions as $action) { if ($action['id'] === $data['id']) { $command = $action['command']; break; } } } else { $command = $cmd_map[$task_type] ?? ''; }
            if (empty($command)) { $send(['log' => '❌ Invalid command.']); break; }
            $proc = popen($command . ' 2>&1', 'r'); while ($proc && !feof($proc)) { $line = fgets($proc); if ($line === false) continue; $send(['log' => trim($line)]); } if ($proc) pclose($proc);
            break;
    }
    
    if ($command) { /* Already handled */ }
    $send(['done' => true, 'stream_type' => $task_type]); exit;
}
function save_settings(array $settings_payload): array { file_put_contents(SETTINGS_FILE, json_encode($settings_payload, JSON_PRETTY_PRINT)); return ['status' => 'success', 'message' => 'Settings saved.', 'settings' => $settings_payload]; }
function get_chat_history(): array { if (!is_dir(CHATS_DIR)) @mkdir(CHATS_DIR, 0755, true); $files = @scandir(CHATS_DIR, SCANDIR_SORT_DESCENDING) ?: []; $history = []; foreach ($files as $file) { if (pathinfo($file, PATHINFO_EXTENSION) === 'json') { $content = json_decode(@file_get_contents(CHATS_DIR . '/' . $file), true); if ($content && isset($content['id'], $content['title'])) $history[] = ['id' => $content['id'], 'title' => $content['title']]; } } return $history; }
function create_chat(): array { if (!is_dir(CHATS_DIR)) @mkdir(CHATS_DIR, 0755, true); $id = 'chat_' . microtime(true) . '_' . bin2hex(random_bytes(4)); $chat = ['id' => $id, 'title' => 'New Conversation', 'created_at' => date('c'), 'messages' => [], 'metadata' => ['model' => '', 'preset_id' => '', 'preset_name' => '']]; file_put_contents(CHATS_DIR . '/' . $id . '.json', json_encode($chat, JSON_PRETTY_PRINT)); return ['status' => 'success', 'chat' => $chat]; }
function get_chat(string $id): ?array { $safe_id = basename($id); if (empty($safe_id)) return null; $file_path = CHATS_DIR . '/' . $safe_id . '.json'; if (!file_exists($file_path) || !is_readable($file_path)) return null; return json_decode(file_get_contents($file_path), true); }
function delete_chat(string $id): array { $safe_id = basename($id); if (empty($safe_id)) return ['status' => 'error']; $file_path = CHATS_DIR . '/' . $safe_id . '.json'; if (file_exists($file_path)) { @unlink($file_path); return ['status' => 'success']; } return ['status' => 'error']; }
function update_chat(array $payload): array { $id = $payload['id'] ?? null; if (!$id) return ['status' => 'error', 'message' => 'ID required.']; $file_path = CHATS_DIR . '/' . basename($id) . '.json'; if (!file_exists($file_path)) return ['status' => 'error', 'message' => 'Chat not found.']; $chat_data = json_decode(file_get_contents($file_path), true); if (isset($payload['title'])) $chat_data['title'] = $payload['title']; if (isset($payload['metadata'])) $chat_data['metadata'] = array_merge($chat_data['metadata'] ?? [], $payload['metadata']); if (isset($payload['messages'])) $chat_data['messages'] = $payload['messages']; file_put_contents($file_path, json_encode($chat_data, JSON_PRETTY_PRINT)); return ['status' => 'success', 'chat' => $chat_data]; }
function clear_all_chats_api(): array { $files = glob(CHATS_DIR . '/*.json'); $deletedCount = 0; foreach ($files as $file) { if (is_file($file)) { @unlink($file); $deletedCount++; } } return ['status' => 'success', 'message' => "Cleared {$deletedCount} chat(s)."]; }
// end of Core Logic & API Functions
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0"><title><?= htmlspecialchars(DASHBOARD_TITLE ?? 'Ollama Powerhouse') ?></title>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.8/dist/purify.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Fira+Code&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" id="prism-theme">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js"></script>
    <style>
:root { --font-main: 'Inter', sans-serif; --font-mono: "Fira Code", monospace; --radius: 8px; --radius-lg: 12px; --transition: all 0.2s ease-in-out; }
:root[data-theme="dark"] { --bg-dark: #11111b; --bg-medium: #181825; --bg-light: #313244; --bg-surface: #1e1e2e; --fg-main: #cdd6f4; --fg-dim: #a6adc8; --fg-subtle: #6c7086; --border-color: #313244; --accent-blue: #89b4fa; --accent-green: #a6e3a1; --accent-red: #f38ba8; --accent-yellow: #f9e2af; --accent-mauve: #cba6f7; --text-on-accent: #11111b; --shadow-color: rgba(0, 0, 0, 0.2); }
:root[data-theme="light"] { --bg-dark: #eff1f5; --bg-medium: #e6e9ef; --bg-light: #dce0e8; --bg-surface: #ffffff; --fg-main: #4c4f69; --fg-dim: #5c5f77; --fg-subtle: #6c6f85; --border-color: #dce0e8; --accent-blue: #1e66f5; --accent-green: #40a02b; --accent-red: #d20f39; --accent-yellow: #df8e1d; --accent-mauve: #8839ef; --text-on-accent: #eff1f5; --shadow-color: rgba(0, 0, 0, 0.1); }
* { box-sizing: border-box; } html { scroll-behavior: smooth; }
body { margin: 0; font-family: var(--font-main); background-color: var(--bg-dark); color: var(--fg-main); font-size: 15px; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; transition: var(--transition); }
.app-container { display: flex; min-height: 100vh; position: relative; }
.sidebar { width: 250px; background: var(--bg-surface); border-right: 1px solid var(--border-color); display: flex; flex-direction: column; padding: 0.75rem; flex-shrink: 0; transition: transform 0.3s ease-in-out, width 0.3s ease-in-out; z-index: 100; }
.sidebar-header { padding: 1rem; margin-bottom: 1rem; text-align: center; display: flex; align-items: center; justify-content: space-between; } .sidebar-header h1 { font-size: 1.6rem; margin: 0; color: var(--fg-main); font-weight: 700; letter-spacing: 1px; } .sidebar-header .version { font-size: 0.75rem; color: var(--fg-dim); }
.sidebar-nav { flex-grow: 1; }
.sidebar-nav a { display: flex; align-items: center; gap: 0.8rem; padding: 0.85rem 1.25rem; text-decoration: none; color: var(--fg-dim); border-radius: var(--radius); transition: var(--transition); font-weight: 500; margin-bottom: 0.25rem; }
.sidebar-nav a:hover { background: var(--bg-light); color: var(--fg-main); }
.sidebar-nav a.active { background: var(--accent-blue); color: var(--text-on-accent); font-weight: 600; box-shadow: 0 4px 10px -2px var(--shadow-color); }
.sidebar-nav i { width: 20px; text-align: center; }
.sidebar-footer { margin-top: auto; padding: 1rem 0 0.5rem 0; border-top: 1px solid var(--border-color); }
#menu-toggle { display: none; background: none; border: none; color: var(--fg-main); font-size: 1.5rem; cursor: pointer; }
#mobile-overlay { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 99; }
.main-content { flex-grow: 1; padding: 2rem; overflow-y: auto; transition: padding-left 0.3s ease-in-out; }
.view { display: none; animation: fadeIn 0.5s ease-in-out; } .view.active { display: block; } @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
h2, h3, h4 { color: var(--fg-main); font-weight: 600; } h2 { font-size: 2rem; margin: 0 0 2rem 0; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; font-weight: 700; } h3 { font-size: 1.3rem; margin: 2rem 0 1.25rem 0; } h4 { font-size: 1rem; margin: 1.5rem 0 0.75rem 0; } h3:first-child, h4:first-child { margin-top: 0; }
.content-box { background: var(--bg-surface); padding: 2rem; border-radius: var(--radius-lg); border: 1px solid var(--border-color); box-shadow: 0 4px 12px var(--shadow-color); } .content-box:not(:last-child) { margin-bottom: 2rem; } .content-box p { color: var(--fg-dim); line-height: 1.6; }
button { position: relative; overflow: hidden; display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; font-family: var(--font-main); border: 1px solid var(--border-color); border-radius: var(--radius); padding: 0.6rem 1.2rem; font-size: 0.9rem; font-weight: 600; transition: var(--transition); cursor: pointer; user-select: none; background-color: var(--bg-light); color: var(--fg-main); }
button:hover:not(:disabled) { transform: translateY(-2px); box-shadow: 0 2px 6px var(--shadow-color); }
button:active:not(:disabled) { transform: translateY(0); box-shadow: none; }
button:disabled { opacity: 0.5; cursor: not-allowed; }
.primary-btn { background-color: var(--accent-blue); color: var(--text-on-accent); border-color: var(--accent-blue); }
.danger-btn { background-color: var(--accent-red); color: var(--text-on-accent); border-color: var(--accent-red); }
.warning-btn { background-color: var(--accent-yellow); color: var(--text-on-accent); border-color: var(--accent-yellow); }
.form-group { position: relative; margin-top: 1.25rem; }
select, input, textarea { width: 100%; border: 1px solid var(--border-color); background: var(--bg-medium); padding: 0.9rem; border-radius: var(--radius); transition: var(--transition); color: var(--fg-main); font-family: var(--font-main); font-size: 0.95rem; }
select:disabled, input:disabled, textarea:disabled { opacity: 0.6; cursor: not-allowed; background-color: var(--bg-dark); }
textarea { resize: none; overflow-y: hidden; }
.form-group label { position: absolute; top: 0.9rem; left: 0.9rem; color: var(--fg-dim); pointer-events: none; transition: var(--transition); background: var(--bg-medium); padding: 0 0.5rem; }
input:focus, textarea:focus, select:focus { border-color: var(--accent-blue); outline:none; }
input:focus + label, input:not(:placeholder-shown) + label, textarea:focus + label, textarea:not(:placeholder-shown) + label, .form-group select:focus + label, .form-group select:not(:placeholder-shown) + label { top: -0.65rem; left: 0.75rem; font-size: 0.75rem; color: var(--accent-blue); }
.pre-wrapper { position: relative; margin-top: 1.5rem; border: 1px solid var(--border-color); border-radius: var(--radius); overflow: hidden; background: #011627; } .pre-wrapper[data-lang]:before { content: attr(data-lang); position: absolute; top: 5px; right: 10px; font-size: 0.75rem; color: #7fdbca; text-transform: uppercase; } .pre-wrapper pre { margin: 0; } .pre-wrapper .copy-btn { position: absolute; top: 2px; right: 80px; background: var(--bg-dark); color: var(--fg-dim); border: 1px solid var(--border-color); opacity: 0; transition: opacity 0.2s; cursor: pointer; border-radius: 5px; padding: 4px 8px; font-size: 12px; } .pre-wrapper:hover .copy-btn { opacity: 1; }
.modal { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(17, 17, 27, 0.6); backdrop-filter: blur(5px); display: none; justify-content: center; align-items: center; z-index: 1000; animation: fadeIn 0.3s; } .modal.active { display: flex; }
.modal-content { background: var(--bg-surface); padding: 2rem; border-radius: var(--radius-lg); width: 90%; max-width: 700px; max-height: 85vh; display: flex; flex-direction: column; border: 1px solid var(--border-color); box-shadow: 0 10px 30px var(--shadow-color); }
.stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(220px, 1fr)); gap: 1rem; }
.stat-card { background: var(--bg-surface); padding: 1.5rem; border-radius: var(--radius-lg); border: 1px solid var(--border-color); transition: var(--transition); }
.stat-card:hover { transform: translateY(-4px); border-color: var(--accent-mauve); box-shadow: 0 4px 12px var(--shadow-color); }
.stat-card-title { font-size: 0.9rem; font-weight: 500; color: var(--fg-dim); margin: 0 0 0.75rem 0; }
.stat-card-value { font-size: 2.2rem; font-weight: 700; color: var(--fg-main); display: flex; align-items: center;}
.stat-card-value.small { font-size: 1rem; font-weight: 400; align-items: flex-start; flex-direction: column; gap: 0.25rem; line-height: 1.4; word-break: break-all; }
.status-light { width: 12px; height: 12px; border-radius: 50%; margin-right: 0.75rem;} .status-light.running { background-color: var(--accent-green); box-shadow: 0 0 8px var(--accent-green); } .status-light.stopped { background-color: var(--accent-red); } .status-light.pending { background-color: var(--accent-yellow); animation: pulse 1.5s infinite; } @keyframes pulse { 0% { box-shadow: 0 0 0 0 var(--accent-yellow); } 70% { box-shadow: 0 0 0 8px rgba(249, 226, 175, 0); } 100% { box-shadow: 0 0 0 0 rgba(249, 226, 175, 0); } }
#model-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 1.5rem; margin-top: 1.5rem; }
.model-card { background: var(--bg-medium); border-radius: var(--radius); border: 1px solid var(--border-color); padding: 1.25rem; display: flex; flex-direction: column; gap: 1rem; transition: var(--transition); } .model-card:hover { transform: translateY(-3px); box-shadow: 0 3px 10px var(--shadow-color); border-color: var(--accent-mauve); } .model-card.flash { animation: flash-green 1s ease-out; } @keyframes flash-green { from { box-shadow: 0 0 15px var(--accent-green); } to { box-shadow: 0 3px 10px var(--shadow-color); } }
.model-card .name { font-weight: 600; font-size: 1.1rem; color: var(--fg-main); word-break: break-all; }
.model-card .meta { font-size: 0.8rem; color: var(--fg-dim); display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; }
.model-card .tags { display: flex; flex-wrap: wrap; gap: 0.5rem; }
.model-card .tag { padding: 0.2rem 0.5rem; border-radius: 5px; font-size: 0.7rem; font-weight: 600; color: var(--text-on-accent); }
.tag.in-memory { background-color: var(--accent-green); } .tag.installed { background-color: var(--accent-mauve); }
.model-card .actions { display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: auto; } .model-card .actions button { padding: 0.4rem 0.8rem; flex-shrink: 0; }
#chat-layout { display: flex; gap: 1.25rem; height: calc(100vh - 12rem); }
#chat-sidebar { width: 250px; flex-shrink: 0; background-color: var(--bg-surface); border-radius: var(--radius-lg); display: flex; flex-direction: column; padding: 0.75rem; border: 1px solid var(--border-color); }
#chat-main-panel { flex-grow: 1; display: flex; flex-direction: column; min-width: 0; }
#chat-messages { flex-grow: 1; overflow-y: auto; padding: 1.25rem; background: var(--bg-medium); border-radius: var(--radius); display: flex; flex-direction: column; gap: 1.25rem; margin-bottom: 1rem; }
#chat-header { display: flex; gap: 0.75rem; align-items: center; margin-bottom: 1rem; }
#chat-metadata { flex-grow: 1; padding: 0.5rem 1rem; background-color: var(--bg-medium); border-radius: var(--radius); font-size: 0.8rem; color: var(--fg-dim); text-align: center; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; margin-bottom: 1rem;}
.message-container { display: flex; flex-direction: column; position: relative; } .message-container.user { align-items: flex-end; } .message-container.assistant { align-items: flex-start; }
.message-container:hover .message-actions { opacity: 1; }
.message-actions { position: absolute; top: -10px; right: 0; display: flex; gap: 5px; background: var(--bg-light); border-radius: var(--radius); padding: 4px; opacity: 0; transition: var(--transition); z-index: 10; }
.message-container.user .message-actions { left: 0; right: auto; }
.message-bubble { max-width: 85%; padding: 0.8rem 1.2rem; border-radius: var(--radius); } .message-container.user .message-bubble { background-color: var(--accent-blue); color: var(--text-on-accent); border-bottom-right-radius: 0; } .message-container.assistant .message-bubble { background-color: var(--bg-light); color: var(--fg-main); border-bottom-left-radius: 0; }
.message-bubble p:first-child { margin-top: 0; } .message-bubble p:last-child { margin-bottom: 0; }
.message-bubble table { border-collapse: collapse; width: 100%; } .message-bubble th, .message-bubble td { border: 1px solid var(--fg-dim); padding: 8px; } .message-bubble th { background-color: var(--bg-medium); }
.message-bubble .thinking-cursor { display: inline-block; width: 10px; height: 1.2em; background-color: var(--fg-main); animation: blink 1s step-end infinite; } @keyframes blink { from, to { background-color: transparent; } 50% { background-color: var(--fg-main); } }
.control-group { display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; gap: 1rem; padding: 1.25rem; } .control-group:not(:first-of-type) { border-top: 1px solid var(--border-color); } .control-group p { text-align: justify; margin: 0; flex-basis: 100%; color: var(--fg-dim); } .control-group.with-p { padding-bottom: 0.75rem; } .control-group .action-area { margin-left: auto; }
#chat-history-list { list-style: none; padding: 0; margin: 1rem 0; flex-grow: 1; overflow-y: auto; }
.history-item { display: flex; align-items: center; justify-content: space-between; padding: 0.75rem 1rem; border-radius: var(--radius); cursor: pointer; transition: var(--transition); } .history-item:hover { background-color: var(--bg-light); } .history-item.active { background-color: var(--accent-blue); color: var(--text-on-accent); font-weight: 500; }
.history-item-actions { display: flex; gap: 0.25rem; opacity: 0; transition: var(--transition); } .history-item:hover .history-item-actions { opacity: 1; }
.history-item-btn { background: none; border: none; color: inherit; cursor: pointer; padding: 0.25rem 0.5rem; border-radius: 5px; transition: var(--transition); } .history-item-btn:hover { color: var(--accent-mauve) !important; background-color: rgba(0,0,0,0.1); } .history-item-btn.delete-chat-btn:hover { color: var(--accent-red) !important; }
.history-title { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex-grow: 1; }
.info-tooltip { position: relative; display: inline-block; cursor: pointer; margin-left: 8px; color: var(--fg-dim); } .info-tooltip .tooltip-text { visibility: hidden; width: 220px; background-color: var(--bg-light); color: var(--fg-main); text-align: center; border-radius: 6px; padding: 5px 10px; position: absolute; z-index: 1; bottom: 125%; left: 50%; margin-left: -110px; opacity: 0; transition: opacity 0.3s; box-shadow: 0 2px 5px var(--shadow-color); } .info-tooltip:hover .tooltip-text { visibility: visible; opacity: 1; }
.diag-item { display: flex; flex-wrap: wrap; align-items: center; justify-content: space-between; gap: 1rem; padding: 1.25rem; border-bottom: 1px solid var(--border-color); } .diag-item:last-child { border-bottom: none; }
.diag-info strong { color: var(--fg-main); } .diag-info span { color: var(--fg-dim); display: block; margin-top: 0.25rem; word-break: break-all; }
.diag-status { display: flex; align-items: center; gap: 0.5rem; font-weight: bold; } .diag-status .fa-circle-check { color: var(--accent-green); } .diag-status .fa-triangle-exclamation { color: var(--accent-yellow); } .diag-status .fa-circle-xmark { color: var(--accent-red); } .diag-status .fa-circle-info { color: var(--accent-blue); }
#toast { position: fixed; bottom: 20px; left: 50%; transform: translateX(-50%); padding: 12px 24px; border-radius: var(--radius); z-index: 2000; opacity: 0; visibility: hidden; transition: opacity 0.3s, visibility 0.3s, transform 0.3s; font-weight: 600; box-shadow: 0 5px 15px var(--shadow-color); }

@media (max-width: 768px) {
    .app-container { flex-direction: column; }
    .sidebar { position: fixed; top: 0; left: 0; height: 100%; transform: translateX(-100%); }
    .sidebar.open { transform: translateX(0); box-shadow: 5px 0 15px var(--shadow-color); }
    #menu-toggle { display: block; position: fixed; top: 1rem; left: 1rem; z-index: 101; }
    #mobile-overlay.active { display: block; }
    .main-content { padding: 5rem 1rem 2rem 1rem; }
    h2 { font-size: 1.5rem; }
    #chat-layout { flex-direction: column; height: auto; }
    #chat-sidebar { width: 100%; margin-bottom: 1rem; }
    .sidebar-header h1 { display: none; }
}
</style>
</head>
<body data-theme="dark">
<div class="app-container">
    <div id="mobile-overlay"></div>
    <button id="menu-toggle"><i class="fa-solid fa-bars"></i></button>
    <nav class="sidebar">
        <div class="sidebar-header"><h1><?= htmlspecialchars(DASHBOARD_TITLE) ?></h1><div class="version">v3.1 Stable</div></div>
        <div class="sidebar-nav">
            <a href="#" class="nav-link active" data-view="dashboard"><i class="fa-solid fa-chart-line"></i><span class="btn-text">Dashboard</span></a>
            <a href="#" class="nav-link" data-view="chat"><i class="fa-solid fa-comments"></i><span class="btn-text">Chat</span></a>
            <a href="#" class="nav-link" data-view="models"><i class="fa-solid fa-cubes"></i><span class="btn-text">Models</span></a>
            <a href="#" class="nav-link" data-view="server"><i class="fa-solid fa-server"></i><span class="btn-text">Server</span></a>
            <a href="#" class="nav-link" data-view="settings"><i class="fa-solid fa-gears"></i><span class="btn-text">Settings</span></a>
            <a href="#" class="nav-link" data-view="diagnostics"><i class="fa-solid fa-wrench"></i><span class="btn-text">System</span></a>
        </div>
        <div class="sidebar-footer"><button id="theme-toggle" style="width:100%"><i class="fa-solid fa-circle-half-stroke"></i><span class="btn-text">Toggle Theme</span></button></div>
    </nav>
    <main class="main-content">
        <section id="view-dashboard" class="view active"><h2>Dashboard</h2><div class="stats-grid"><div class="stat-card"><div class="stat-card-title">Server Status</div><div id="db-server-status" class="stat-card-value"><span id="db-status-light" class="status-light"></span> <span id="db-status-text">Checking...</span></div></div><div class="stat-card"><div class="stat-card-title">Ollama Version</div><div id="db-ollama-version" class="stat-card-value">N/A</div></div><div class="stat-card"><div class="stat-card-title">Installed Models</div><div id="db-models-installed" class="stat-card-value">0</div></div><div class="stat-card"><div class="stat-card-title">CPU Load</div><div id="db-cpu-load" class="stat-card-value">N/A</div></div></div><div class="content-box" style="margin-top: 2rem;"><h3>Quick Start</h3><div class="stats-grid"><button id="qs-start-server" class="primary-btn" style="height: 50px;"><i class="fa-solid fa-play"></i> Start Server</button><button id="qs-go-chat" class="primary-btn" style="height: 50px;"><i class="fa-solid fa-comments"></i> New Chat</button></div></div><div class="content-box" style="margin-top: 2rem;"><h3 style="margin-top:0;">Live System Info</h3><div class="stats-grid" id="system-info-grid"></div></div><div class="content-box" style="margin-top: 2rem;"><h3 style="margin-top:0;">Models in Memory</h3><div id="running-models-list" class="stats-grid"></div></div></section>
        <section id="view-chat" class="view"><h2>Chat</h2><div id="chat-layout"><div id="chat-sidebar"><h3>Conversations</h3><ul id="chat-history-list"></ul><div class="sidebar-footer"><button id="new-chat-btn" class="primary-btn" style="width:100%"><i class="fa-solid fa-plus"></i><span class="btn-text">New Chat</span></button><button id="clear-history-btn" class="danger-btn" style="width:100%; margin-top:0.5rem;"><i class="fa-solid fa-trash"></i><span class="btn-text">Clear All</span></button></div></div><div id="chat-main-panel"><div id="chat-header"><div class="form-group" style="flex-grow:1; margin-top:0;"><select id="active-model-select"></select></div><div class="form-group" style="flex-grow:1; margin-top:0;"><select id="chat-preset-select"></select></div></div><div id="chat-metadata"></div><div id="chat-messages"><div class="message-container assistant"><div class="message-bubble">Welcome! Select a model and send a message to begin.</div></div></div>
        <form id="chat-form" style="display:flex; gap:0.75rem;"><div class="form-group" style="flex-grow:1; margin:0;"><textarea id="chat-prompt" rows="1" placeholder=" " required></textarea><label for="chat-prompt">Send a message...</label></div><button type="submit" id="btn-chat-send" class="primary-btn"><i class="fa-solid fa-paper-plane"></i></button></form></div></div></section>
        <section id="view-models" class="view"><h2>Model Management</h2><div class="content-box"><div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;"><h3 style="margin: 0;">Pull Model from Registry</h3><form id="pull-model-form" style="display:flex; gap: 0.75rem; flex-grow: 1; max-width: 400px;"><div class="form-group" style="flex-grow:1; margin:0;"><input type="text" id="pull-model-name" placeholder=" " required><label for="pull-model-name">e.g., llama3:latest</label></div><button type="submit" class="primary-btn"><i class="fa-solid fa-download"></i></button></form></div></div><div class="content-box"><div style="display:flex; justify-content: space-between; align-items:center; flex-wrap: wrap; gap: 1rem;"><div style="display:flex; gap: 1rem; align-items: center;"><h3 style="margin:0; padding:0; border:0;">Local & Installed Models</h3><input type="search" id="model-search-input" placeholder="Search models..." style="width: 200px;"></div><div style="display:flex; gap:0.5rem;"><button id="btn-refresh-models" title="Refresh list"><i class="fa-solid fa-rotate"></i><span class="btn-text">Refresh</span></button><button id="btn-upload-gguf" class="primary-btn"><i class="fa-solid fa-upload"></i><span class="btn-text">Upload GGUF</span></button></div><input type="file" id="gguf-file-input" accept=".gguf,.bin" style="display:none;"></div><div id="model-grid"></div></div></section>
        <section id="view-server" class="view"><h2>Server Control</h2><div class="content-box"><div class="control-group"><div id="server-status-indicator" class="stat-card-value" style="font-size: 1.1rem;"><span id="server-status-light" class="status-light"></span><span id="server-status-text">Checking...</span></div><div class="action-area" style="display:flex;gap:0.5rem;"><button id="btn-start-server" class="primary-btn"><i class="fa-solid fa-play"></i><span class="btn-text">Start / Sync Server</span></button><button id="btn-stop-server" class="warning-btn"><i class="fa-solid fa-stop"></i><span class="btn-text">Stop Server</span></button></div></div><div class="control-group"><p class="text-justify">Terminate all background Ollama processes and tasks on the system immediately. This is a force-kill and is more aggressive than stopping the server.</p><div class="action-area"><button id="btn-stop-all-tasks" class="danger-btn"><i class="fa-solid fa-ban"></i><span class="btn-text">Kill All Processes</span></button></div></div><div class="control-group"><p class="text-justify">Permanently delete ALL models currently installed and recognized by Ollama. This action cannot be undone and will require re-pulling or re-importing models.</p><div class="action-area"><button id="btn-purge-all" class="danger-btn"><i class="fa-solid fa-skull"></i><span class="btn-text">Purge All Models</span></button></div></div></div><div class="content-box"><h3>Server Log <button id="btn-refresh-log" style="padding: 0.3rem 0.6rem; font-size: 0.8rem; margin-left: 1rem;"><i class="fa-solid fa-rotate"></i></button></h3><pre id="server-log-output" style="max-height: 400px; overflow-y: auto; white-space: pre-wrap; word-break: break-all;">Server log will appear here.</pre></div></section>
        <section id="view-settings" class="view"><h2>Settings</h2><div class="content-box">
            <h3>Preset Management</h3>
            <div style="display:flex; gap:1rem; align-items:center; flex-wrap: wrap;">
                <div class="form-group" style="flex-grow:1; margin-top:0;"><select id="setting-preset-select"></select></div>
                <button id="btn-save-preset" class="primary-btn" disabled><i class="fa-solid fa-save"></i><span class="btn-text">Save</span></button>
                <button id="btn-save-preset-as-new"><i class="fa-solid fa-plus"></i><span class="btn-text">New</span></button>
                <button id="btn-delete-preset" class="danger-btn"><i class="fa-solid fa-trash"></i></button>
                <button id="btn-import-presets"><i class="fa-solid fa-file-import"></i></button><input type="file" id="preset-import-input" accept=".json" style="display:none;">
                <button id="btn-export-presets"><i class="fa-solid fa-file-export"></i></button>
            </div>
            <form id="settings-form">
                <h3 style="margin-top: 2.5rem;">Chat Parameters<span id="preset-dirty-indicator" style="display:none; color: var(--accent-yellow); font-size: 0.9rem; margin-left: 1rem;">(Unsaved Changes)</span></h3>
                <div class="form-group"><input type="text" id="setting-preset-name" placeholder=" " required><label for="setting-preset-name">Preset Name</label></div>
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.25rem;">
                    <div class="form-group"><label for="setting-temperature">Temperature</label><input type="number" id="setting-temperature" step="0.1" min="0" max="2" placeholder=" "><div class="info-tooltip"><i class="fa-solid fa-circle-info"></i><span class="tooltip-text">Controls randomness. Lower is more deterministic, higher is more creative.</span></div></div>
                    <div class="form-group"><label for="setting-repeat_penalty">Repeat Penalty</label><input type="number" id="setting-repeat_penalty" step="0.1" min="0" placeholder=" "><div class="info-tooltip"><i class="fa-solid fa-circle-info"></i><span class="tooltip-text">Penalizes the model for repeating tokens. Higher values reduce repetition.</span></div></div>
                    <div class="form-group"><label for="setting-top_k">Top K</label><input type="number" id="setting-top_k" step="1" min="0" placeholder=" "><div class="info-tooltip"><i class="fa-solid fa-circle-info"></i><span class="tooltip-text">Samples from the K most likely next tokens. 0 to disable.</span></div></div>
                    <div class="form-group"><label for="setting-top_p">Top P</label><input type="number" id="setting-top_p" step="0.05" min="0" max="1" placeholder=" "><div class="info-tooltip"><i class="fa-solid fa-circle-info"></i><span class="tooltip-text">Samples from tokens with a cumulative probability of P. 1.0 to disable.</span></div></div>
                </div><div class="form-group"><textarea id="setting-system" rows="4" placeholder=" "></textarea><label for="setting-system">System Prompt</label></div>
            </form>
        </div>
        <div class="content-box">
            <h3>Global Settings</h3>
            <div class="form-group"><input type="password" id="setting-api_password" placeholder=" "><label for="setting-api_password">API Password (optional)</label></div>
            <div class="form-group"><select id="setting-title-model"></select><label for="setting-title-model">Auto-Title Generation Model</label></div>
            <button id="btn-save-globals" class="primary-btn" style="margin-top:1.5rem;"><i class="fa-solid fa-save"></i><span class="btn-text">Save Global Settings</span></button>
        </div>
        </section>
        <section id="view-diagnostics" class="view"><h2>System Automation & Health</h2>
             <div class="content-box"><h3>Automated Actions</h3><p class="text-justify">Use these one-click actions to install, configure, and repair your dashboard environment. Actions may require elevated permissions (sudo) and are run at your own risk.</p><div class="auto-actions-grid stats-grid" id="auto-actions-container"></div></div>
            <div class="content-box"><h3>System Health Check</h3><p class="text-justify">This tool checks for common configuration and permission issues. Problems marked with <i class="fa-solid fa-triangle-exclamation" style="color:var(--accent-yellow)"></i> may prevent the dashboard from working correctly and may offer an automatic fix.</p><div class="control-group" style="margin-bottom:0;"><span>Verify critical paths and PHP settings.</span><button id="btn-run-diagnostics" class="primary-btn"><i class="fa-solid fa-heart-pulse"></i><span class="btn-text">Run Checks</span></button></div><div id="diagnostics-results" style="margin-top:1.5rem; display:none; background: var(--bg-surface); border-radius:var(--radius-lg); padding: 0.5rem 0;"></div></div>
        </section>
    </main>
</div>
<div id="progress-modal" class="modal"><div class="modal-content"><div style="display:flex; justify-content: space-between; align-items: center;"><h3 id="progress-title" style="margin:0;">Task in Progress...</h3><button id="progress-stop-btn" class="danger-btn"><i class="fa-solid fa-ban"></i><span class="btn-text">Stop Task</span></button></div><pre id="progress-log" style="margin-top:1.5rem; flex-grow:1; white-space: pre-wrap; word-break: break-all; max-height: 60vh; overflow-y: auto;">Starting...</pre><div style="text-align:right; margin-top:1rem;"><button id="progress-close-btn" style="display:none;" class="primary-btn"><i class="fa-solid fa-check"></i><span class="btn-text">Close</span></button></div></div></div>
<div id="model-details-modal" class="modal"><div class="modal-content" style="max-height: 90vh; overflow-y: auto;"><h3 id="model-details-title">Model Details</h3><h4 style="margin-top:2rem;">Parameters</h4><pre id="model-details-params"></pre><h4>Modelfile</h4><pre id="model-details-modelfile"></pre><div style="text-align:right; margin-top:1rem;"><button id="model-details-close-btn"><span class="btn-text">Close</span></button></div></div></div>
<div id="tag-model-modal" class="modal"><div class="modal-content"><form id="tag-model-form"><h3 id="tag-model-title">Tag / Copy Model</h3><p>Create a new tag for <strong id="tag-model-source-name"></strong>.</p><div class="form-group"><input type="text" id="tag-model-destination" required placeholder=" "><label for="tag-model-destination">New Tag Name (e.g., my-alias:latest)</label></div><div style="text-align:right; margin-top:1.5rem; display:flex; gap:0.5rem; justify-content:flex-end;"><button type="button" id="tag-model-cancel-btn"><span class="btn-text">Cancel</span></button><button type="submit" class="primary-btn"><i class="fa-solid fa-tag"></i><span class="btn-text">Create Tag</span></button></div></form></div></div>
<div id="confirm-action-modal" class="modal"><div class="modal-content"><form id="confirm-action-form"><h3>Confirm Destructive Action</h3><p id="confirm-action-text"></p><div class="form-group"><input type="text" id="confirm-action-input" required placeholder=" " autocomplete="off"><label for="confirm-action-input" id="confirm-action-label">Type to confirm</label></div><div style="text-align:right; margin-top:1.5rem; display:flex; gap:0.5rem; justify-content:flex-end;"><button type="button" id="confirm-action-cancel-btn"><span class="btn-text">Cancel</span></button><button type="submit" id="confirm-action-btn" class="danger-btn" disabled><i class="fa-solid fa-check"></i><span class="btn-text">Confirm</span></button></div></form></div></div>
<div id="toast"></div>

<!-- ✨💻✨ 10x Evolved Engineer: Production-Stable JS Engine v3.1 -->
<script>
// ✨💻✨ Production-Stable JS Engine v3.1: Streamlined, bug-fixed, and performance-tuned.
document.addEventListener('DOMContentLoaded', () => {
    const state = { server: { running: false, responsive: false, pid: null, status_text: 'Stopped', version: 'N/A' }, systemInfo: {}, models: { installed: [], running: [], searchQuery: '' }, chat: { currentId: null, metadata: {}, messages: [], history: [], isStreaming: false, isGeneratingTitle: false, titleStreamContent: '' }, settings: { presets: [], active_preset_id: null, api_password: '', title_generation_model: 'llama3:latest' }, diagnostics: { checks: [], actions: [] }, apiHistory: [], currentStreamController: null, logStreamController: null, systemInfoPoller: null, };
    const dom = { appContainer: document.querySelector('.app-container'), sidebar: document.querySelector('.sidebar'), menuToggle: document.getElementById('menu-toggle'), mobileOverlay: document.getElementById('mobile-overlay'), navLinks: document.querySelectorAll('.nav-link'), views: document.querySelectorAll('.view'), dbStatusLight: document.getElementById('db-status-light'), dbStatusText: document.getElementById('db-status-text'), dbOllamaVersion: document.getElementById('db-ollama-version'), dbModelsInstalled: document.getElementById('db-models-installed'), dbCpuLoad: document.getElementById('db-cpu-load'), systemInfoGrid: document.getElementById('system-info-grid'), runningModelsList: document.getElementById('running-models-list'), qsStartServer: document.getElementById('qs-start-server'), qsGoChat: document.getElementById('qs-go-chat'), activeModelSelect: document.getElementById('active-model-select'), chatHistoryList: document.getElementById('chat-history-list'), newChatBtn: document.getElementById('new-chat-btn'), clearHistoryBtn: document.getElementById('clear-history-btn'), chatMessages: document.getElementById('chat-messages'), chatForm: document.getElementById('chat-form'), chatPrompt: document.getElementById('chat-prompt'), btnChatSend: document.getElementById('btn-chat-send'), chatPresetSelect: document.getElementById('chat-preset-select'), chatMetadata: document.getElementById('chat-metadata'), pullModelForm: document.getElementById('pull-model-form'), modelGrid: document.getElementById('model-grid'), modelSearchInput: document.getElementById('model-search-input'), btnRefreshModels: document.getElementById('btn-refresh-models'), btnUploadGGUF: document.getElementById('btn-upload-gguf'), ggufFileInput: document.getElementById('gguf-file-input'), serverStatusLight: document.getElementById('server-status-light'), serverStatusText: document.getElementById('server-status-text'), btnStartServer: document.getElementById('btn-start-server'), btnStopServer: document.getElementById('btn-stop-server'), btnStopAllTasks: document.getElementById('btn-stop-all-tasks'), btnPurgeAll: document.getElementById('btn-purge-all'), serverLogOutput: document.getElementById('server-log-output'), btnRefreshLog: document.getElementById('btn-refresh-log'), settingsForm: document.getElementById('settings-form'), settingPresetSelect: document.getElementById('setting-preset-select'), btnSavePreset: document.getElementById('btn-save-preset'), btnSavePresetAsNew: document.getElementById('btn-save-preset-as-new'), btnDeletePreset: document.getElementById('btn-delete-preset'), presetDirtyIndicator: document.getElementById('preset-dirty-indicator'), settingApiPassword: document.getElementById('setting-api_password'), settingTitleModel: document.getElementById('setting-title-model'), btnSaveGlobals: document.getElementById('btn-save-globals'), btnImportPresets: document.getElementById('btn-import-presets'), btnExportPresets: document.getElementById('btn-export-presets'), presetImportInput: document.getElementById('preset-import-input'), btnRunDiagnostics: document.getElementById('btn-run-diagnostics'), diagnosticsResults: document.getElementById('diagnostics-results'), autoActionsContainer: document.getElementById('auto-actions-container'), progressModal: document.getElementById('progress-modal'), progressTitle: document.getElementById('progress-title'), progressLog: document.getElementById('progress-log'), progressCloseBtn: document.getElementById('progress-close-btn'), progressStopBtn: document.getElementById('progress-stop-btn'), modelDetailsModal: document.getElementById('model-details-modal'), modelDetailsCloseBtn: document.getElementById('model-details-close-btn'), modelDetailsTitle: document.getElementById('model-details-title'), modelDetailsParams: document.getElementById('model-details-params'), modelDetailsModelfile: document.getElementById('model-details-modelfile'), tagModelModal: document.getElementById('tag-model-modal'), tagModelForm: document.getElementById('tag-model-form'), tagModelSourceName: document.getElementById('tag-model-source-name'), tagModelDestination: document.getElementById('tag-model-destination'), tagModelCancelBtn: document.getElementById('tag-model-cancel-btn'), confirmActionModal: document.getElementById('confirm-action-modal'), confirmActionForm: document.getElementById('confirm-action-form'), confirmActionText: document.getElementById('confirm-action-text'), confirmActionInput: document.getElementById('confirm-action-input'), confirmActionLabel: document.getElementById('confirm-action-label'), confirmActionBtn: document.getElementById('confirm-action-btn'), confirmActionCancelBtn: document.getElementById('confirm-action-cancel-btn'), themeToggle: document.getElementById('theme-toggle'), toast: document.getElementById('toast'), };
    const app = {
        setState: (updater, renderHints) => { const newState = updater(state); Object.assign(state, newState); if (renderHints) { (Array.isArray(renderHints) ? renderHints : [renderHints]).forEach(hint => app.render(hint)); } },
        render: (hint) => { if (!hint || hint === 'all') return ui.renderAll(); if (hint.includes('server')) { ui.renderDashboard(); ui.renderServerControls(); ui.renderRunningModels(); } if (hint.includes('models')) { ui.renderModels(); ui.renderChat(); ui.renderSettings(); } if (hint.includes('chat')) { ui.renderChatHistory(); ui.renderChatMessages(); ui.renderChatMetadata(); } if (hint.includes('settings')) ui.renderSettings(); if (hint.includes('system')) ui.renderSystemInfo(); },
        async init() { this.setupEventListeners(); this.loadTheme(); showToast('Initializing Powerhouse...', 'info'); const initialState = await api.call('get_initial_state'); if (initialState) { app.setState(s => ({ ...s, server: { ...s.server, ...initialState.status, version: initialState.version }, systemInfo: initialState.system_info, models: { ...s.models, installed: initialState.installed_models, running: initialState.running_models, }, chat: { ...s.chat, history: initialState.chat_history }, settings: initialState.settings, diagnostics: { ...s.diagnostics, actions: initialState.diagnostics } }), 'all'); if (state.chat.history.length > 0) await chatActions.load(state.chat.history[0].id); else await chatActions.new(); this.startSystemPoll(); } },
        runStreamTask: (task_type, title, data = {}) => { dom.progressTitle.textContent = title; dom.progressLog.textContent = 'Starting task...\n'; dom.progressModal.classList.add('active'); dom.progressCloseBtn.style.display = 'none'; api.startStream({ task_type, data }); },
        startSystemPoll: () => { if(state.systemInfoPoller) clearInterval(state.systemInfoPoller); state.systemInfoPoller = setInterval(async () => { const [info, status] = await Promise.all([api.call('get_system_info'), api.call('get_server_status')]); if (info) app.setState(s => ({...s, systemInfo: info}), 'system'); if (status) { if (status.running !== state.server.running || status.responsive !== state.server.responsive) { modelActions.refresh(); } app.setState(s => ({...s, server: {...s.server, ...status}}), 'server'); } }, 3000); },
        confirmAction: (actionPhrase, text, callback) => { dom.confirmActionText.textContent = text; dom.confirmActionLabel.textContent = `Type "${actionPhrase}" to confirm`; dom.confirmActionInput.value = ''; dom.confirmActionBtn.disabled = true; dom.confirmActionModal.classList.add('active'); dom.confirmActionInput.focus(); dom.confirmActionInput.oninput = () => { dom.confirmActionBtn.disabled = dom.confirmActionInput.value !== actionPhrase; }; dom.confirmActionForm.onsubmit = (e) => { e.preventDefault(); dom.confirmActionModal.classList.remove('active'); callback(); }; },
        loadTheme: () => { const theme = localStorage.getItem('theme') || 'dark'; document.documentElement.setAttribute('data-theme', theme); document.getElementById('prism-theme').href = theme === 'light' ? 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css' : 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css'; },
        toggleTheme: () => { app.loadTheme(document.documentElement.getAttribute('data-theme') === 'dark' ? 'light' : 'dark'); },
        setupEventListeners() { dom.menuToggle.onclick = () => { dom.sidebar.classList.toggle('open'); dom.mobileOverlay.classList.toggle('active'); }; dom.mobileOverlay.onclick = () => { dom.sidebar.classList.remove('open'); dom.mobileOverlay.classList.remove('active'); }; dom.navLinks.forEach(link => { link.onclick = (e) => { e.preventDefault(); const viewId = `view-${link.dataset.view}`; dom.views.forEach(v => v.classList.toggle('active', v.id === viewId)); dom.navLinks.forEach(l => l.classList.toggle('active', l === link)); if (viewId === 'view-server') systemActions.startLogStream(); else systemActions.stopLogStream(); if (window.innerWidth <= 768) { dom.sidebar.classList.remove('open'); dom.mobileOverlay.classList.remove('active'); } } }); dom.chatForm.onsubmit = (e) => { e.preventDefault(); if (state.chat.isStreaming) streamActions.stop(); else chatActions.send(); }; dom.chatPrompt.addEventListener('keydown', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); dom.chatForm.requestSubmit(); } }); dom.chatPrompt.addEventListener('input', () => { dom.chatPrompt.style.height = 'auto'; dom.chatPrompt.style.height = (dom.chatPrompt.scrollHeight) + 'px'; if (!dom.chatPrompt.value) dom.chatPrompt.style.height = 'auto'; }); dom.newChatBtn.onclick = () => chatActions.new(); dom.clearHistoryBtn.onclick = () => app.confirmAction('clear all chats', 'This will delete ALL chat conversations permanently.', () => chatActions.clearAll()); dom.pullModelForm.onsubmit = (e) => { e.preventDefault(); modelActions.pull(); }; dom.modelSearchInput.oninput = (e) => app.setState(s => ({...s, models: {...s.models, searchQuery: e.target.value}}), 'models'); dom.btnRefreshModels.onclick = (e) => { ui.setButtonLoading(e.currentTarget, true); modelActions.refresh().finally(() => ui.setButtonLoading(e.currentTarget, false)); }; dom.btnUploadGGUF.onclick = () => dom.ggufFileInput.click(); dom.ggufFileInput.onchange = () => modelActions.uploadGGUF(); dom.btnStartServer.onclick = () => systemActions.startServer(); dom.btnStopServer.onclick = () => systemActions.stopServer(); dom.btnStopAllTasks.onclick = () => app.confirmAction('kill all processes', 'This will forcefully terminate all Ollama processes.', () => systemActions.killAll()); dom.btnPurgeAll.onclick = () => app.confirmAction('purge all models', 'This will delete ALL installed models permanently.', () => systemActions.purgeAll()); dom.btnRefreshLog.onclick = () => systemActions.refreshLog(); dom.settingPresetSelect.onchange = (e) => { if(!dom.btnSavePreset.disabled) if(!confirm('You have unsaved changes. Discard them?')) { e.target.value = state.settings.active_preset_id; return; } app.setState(s => ({...s, settings: {...s.settings, active_preset_id: e.target.value}}), 'settings'); }; dom.settingsForm.oninput = () => { dom.btnSavePreset.disabled = false; dom.presetDirtyIndicator.style.display = 'inline'; }; dom.btnSavePreset.onclick = (e) => settingsActions.savePreset(e.currentTarget); dom.btnSavePresetAsNew.onclick = () => settingsActions.savePresetAsNew(); dom.btnDeletePreset.onclick = (e) => settingsActions.deletePreset(e.currentTarget); dom.btnSaveGlobals.onclick = (e) => settingsActions.saveGlobal(e.currentTarget); dom.btnImportPresets.onclick = () => dom.presetImportInput.click(); dom.presetImportInput.onchange = (e) => settingsActions.importPresets(e.target.files[0]); dom.btnExportPresets.onclick = () => settingsActions.exportPresets(); dom.btnRunDiagnostics.onclick = (e) => systemActions.runDiagnostics(e.currentTarget); dom.themeToggle.onclick = () => app.toggleTheme(); [dom.progressCloseBtn, dom.modelDetailsCloseBtn, dom.tagModelCancelBtn, dom.confirmActionCancelBtn].forEach(btn => btn.onclick = () => btn.closest('.modal').classList.remove('active')); dom.tagModelForm.onsubmit = (e) => { e.preventDefault(); modelActions.tag(); }; dom.progressStopBtn.onclick = () => streamActions.stop(); dom.qsStartServer.onclick = () => systemActions.startServer(); dom.qsGoChat.onclick = () => dom.navLinks.forEach(l => { if(l.dataset.view === 'chat') l.click(); }); },
    };
    const api = { 
        async call(action, payload = {}) { try { if (!['get_initial_state','get_server_status','get_system_info'].includes(action)) payload.auth = state.settings?.api_password || ''; const response = await fetch(`?action=${action}`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) }); const text = await response.text(); if (!response.ok) { let errorMsg = `API Error ${response.status}: ${response.statusText}`; try { const errJson = JSON.parse(text); errorMsg = errJson.message || errorMsg; } catch (e) { errorMsg = text || errorMsg; } throw new Error(errorMsg); } return JSON.parse(text); } catch (error) { console.error(`API call failed for ${action}:`, error); showToast(error.message, 'error'); return null; } }, 
        startStream(payload) { if (state.currentStreamController) state.currentStreamController.close(); payload.auth = state.settings?.api_password || ''; const queryParams = new URLSearchParams({ action: 'stream_task', task_type: payload.task_type, payload: JSON.stringify(payload.data), auth: payload.auth }); const eventSource = new EventSource(`?${queryParams.toString()}`); state.currentStreamController = eventSource; eventSource.onmessage = (event) => { try { const data = JSON.parse(event.data); if (data.done) streamActions.onComplete(data.stream_type); else streamActions.onMessage(data, data.stream_type); } catch (e) { streamActions.onMessage({ error: `Stream Parse Error` }, payload.task_type); } }; eventSource.onerror = (err) => { streamActions.onError(err); eventSource.close(); }; }, 
    };
    const ui = {
        renderAll() { this.renderDashboard(); this.renderServerControls(); this.renderModels(); this.renderChat(); this.renderSettings(); this.renderDiagnostics(); },
        renderDashboard() { const { running, responsive, status_text } = state.server; dom.dbStatusLight.className = `status-light ${running ? (responsive ? 'running' : 'pending') : 'stopped'}`; dom.dbStatusText.textContent = status_text; dom.dbOllamaVersion.textContent = state.server.version; dom.dbModelsInstalled.textContent = state.models.installed.length; dom.qsStartServer.disabled = running; },
        renderSystemInfo() { const info = state.systemInfo; dom.dbCpuLoad.textContent = info.cpu_load != null ? `${info.cpu_load.toFixed(1)}%` : 'N/A'; dom.systemInfoGrid.innerHTML = `<div class="stat-card"><div class="stat-card-title">Memory Usage</div><div class="stat-card-value small">${info.memory?.total > 0 ? `${info.memory.used} / ${info.memory.total} GB` : 'N/A'}</div></div><div class="stat-card"><div class="stat-card-title">Disk Usage</div><div class="stat-card-value small">${info.disk_total != null ? `${(info.disk_total - info.disk_free).toFixed(2)} / ${info.disk_total} GB` : 'N/A'}</div></div>`; },
        renderRunningModels() { if(state.models.running.length === 0) { dom.runningModelsList.innerHTML = `<p style="text-align:center; color: var(--fg-dim);">No models currently loaded in memory.</p>`; return; } dom.runningModelsList.innerHTML = state.models.running.map(m => `<div class="stat-card"><div class="stat-card-title">${m.name}</div><div class="stat-card-value small"><span>Size: ${m.size}</span><span>PID: ${m.pid}</span></div></div>`).join(''); },
        renderServerControls() { const { running, responsive, pid, status_text } = state.server; dom.serverStatusLight.className = `status-light ${running ? (responsive ? 'running' : 'pending') : 'stopped'}`; dom.serverStatusText.textContent = running ? `${status_text} (PID: ${pid})` : 'Stopped'; dom.btnStartServer.disabled = running; dom.btnStopServer.disabled = !running; dom.btnPurgeAll.disabled = !responsive; },
        renderModels() { dom.modelGrid.innerHTML = ''; const modelsToDisplay = state.models.installed.filter(m => m.name.toLowerCase().includes(state.models.searchQuery.toLowerCase())); if (modelsToDisplay.length === 0) { dom.modelGrid.innerHTML = `<p style="text-align:center; color: var(--fg-dim);">No models match your search.</p>`; return; } modelsToDisplay.forEach(model => { const card = document.createElement('div'); card.className = `model-card ${model.flash ? 'flash' : ''}`; card.innerHTML = `<div class="name">${model.name}</div><div class="meta"><span><i class="fa-solid fa-database"></i> ${(model.size / 1e9).toFixed(2)} GB</span><span><i class="fa-solid fa-microchip"></i> ${model.quantization}</span><span><i class="fa-solid fa-tag"></i> ${model.details.family || 'N/A'}</span></div><div class="tags">${state.models.running.some(r => r.id.startsWith(model.id)) ? '<span class="tag in-memory">In Memory</span>' : ''}</div><div class="actions"><button class="btn-model-details"><i class="fa-solid fa-circle-info"></i> Details</button><button class="btn-model-tag"><i class="fa-solid fa-tag"></i> Tag / Copy</button><button class="danger-btn btn-model-delete"><i class="fa-solid fa-trash-can"></i> Delete</button></div>`; card.querySelector('.btn-model-delete').onclick = (e) => app.confirmAction(model.name, `This will delete the model "${model.name}" permanently.`, () => modelActions.delete(model.name, e.currentTarget)); card.querySelector('.btn-model-details').onclick = () => modelActions.showDetails(model.name); card.querySelector('.btn-model-tag').onclick = () => modelActions.showTagModal(model.name); dom.modelGrid.appendChild(card); }); },
        renderChat() { const currentModel = dom.activeModelSelect.value; dom.activeModelSelect.innerHTML = state.models.installed.map(m => `<option value="${m.name}" ${m.name === currentModel ? 'selected' : ''}>${m.name}</option>`).join('') || `<option>No models installed</option>`; dom.settingTitleModel.innerHTML = dom.activeModelSelect.innerHTML; this.renderChatHistory(); this.renderChatMetadata(); },
        renderChatHistory() { dom.chatHistoryList.innerHTML = ''; state.chat.history.forEach(chat => { const li = document.createElement('li'); li.className = 'history-item'; li.dataset.chatId = chat.id; if (chat.id === state.chat.currentId) li.classList.add('active'); li.innerHTML = `<span class="history-title">${chat.title}</span><div class="history-item-actions"><button class="history-item-btn rename-chat-btn" title="Rename Chat"><i class="fa-solid fa-pen-to-square"></i></button><button class="history-item-btn delete-chat-btn" title="Delete Chat"><i class="fa-solid fa-trash-can"></i></button></div>`; li.querySelector('.history-title').onclick = () => chatActions.load(chat.id); li.querySelector('.rename-chat-btn').onclick = (e) => { e.stopPropagation(); chatActions.rename(chat.id, chat.title); }; li.querySelector('.delete-chat-btn').onclick = (e) => { e.stopPropagation(); chatActions.delete(chat.id); }; dom.chatHistoryList.appendChild(li); }); },
        renderChatMessages() { dom.chatMessages.innerHTML = ''; state.chat.messages.forEach((msg, index) => this.addChatMessage(msg, index)); if(state.chat.messages.length === 0) dom.chatMessages.innerHTML = `<div class="message-container assistant"><div class="message-bubble">Welcome! Select a model and send a message to begin.</div></div>`; },
        renderChatMetadata() { const meta = state.chat.metadata; dom.chatMetadata.style.display = (meta && meta.model) ? 'block' : 'none'; if(meta && meta.model) dom.chatMetadata.innerHTML = `Model: <strong>${meta.model}</strong>  |  Preset: <strong>${meta.preset_name || 'Unknown'}</strong>`; },
        renderSettings() { const s = state.settings; if(!s || !s.presets) return; dom.settingApiPassword.value = s.api_password || ''; dom.settingTitleModel.value = s.title_generation_model || 'llama3:latest'; const presetOptions = s.presets.map(p => `<option value="${p.id}" ${p.id === s.active_preset_id ? 'selected' : ''}>${p.name}</option>`).join(''); dom.settingPresetSelect.innerHTML = presetOptions; dom.chatPresetSelect.innerHTML = presetOptions; dom.chatPresetSelect.value = s.active_preset_id; this.populatePresetForm(s.active_preset_id); },
        populatePresetForm(presetId) { const preset = state.settings.presets.find(p => p.id === presetId); if (preset) { Object.keys(preset).forEach(key => { const el = dom.settingsForm[`setting-${key}`]; if(el) el.value = preset[key]; }); dom.btnSavePreset.disabled = true; dom.presetDirtyIndicator.style.display = 'none'; } },
        renderDiagnostics() { dom.autoActionsContainer.innerHTML = ''; state.diagnostics.actions.forEach(action => { const card = document.createElement('div'); card.className = 'content-box'; card.style.padding = '1.5rem'; card.innerHTML = `<h4 style="margin-top:0;">${action.title}</h4><p class="text-justify" style="color:var(--fg-dim); font-size:0.9rem; flex-grow:1;">${action.description}</p><button class="warning-btn" data-action-id="${action.id}">Execute</button>`; card.querySelector('button').onclick = () => app.confirmAction(action.id, action.description, () => systemActions.runAutoAction(action.id)); dom.autoActionsContainer.appendChild(card); }); },
        addChatMessage(msg, index, isStreaming=false) { const container = document.createElement('div'); container.className = `message-container ${msg.role}`; container.dataset.index = index; const bubble = document.createElement('div'); bubble.className = 'message-bubble'; if(isStreaming) { bubble.id = 'streaming-bubble'; bubble.innerHTML = '<span class="thinking-cursor"></span>'; } else { bubble.innerHTML = DOMPurify.sanitize(marked.parse(msg.content, { gfm: true, breaks: true })); bubble.querySelectorAll('pre code').forEach(el => { const lang = [...el.classList].find(c => c.startsWith('language-')); if(lang) el.parentElement.setAttribute('data-lang', lang.substring(9)); Prism.highlightElement(el); }); bubble.querySelectorAll('pre').forEach(pre => { const wrapper = document.createElement('div'); wrapper.className = 'pre-wrapper'; pre.parentNode.insertBefore(wrapper, pre); wrapper.appendChild(pre); const btn = document.createElement('button'); btn.className = 'copy-btn'; btn.innerHTML = '<i class="fa-solid fa-copy"></i> Copy'; btn.onclick = () => { navigator.clipboard.writeText(pre.querySelector('code').innerText); showToast('Copied to clipboard!'); }; wrapper.appendChild(btn); }); if (msg.role === 'assistant') { const actions = document.createElement('div'); actions.className = 'message-actions'; actions.innerHTML = `<button title="Regenerate response"><i class="fa-solid fa-arrows-rotate"></i></button>`; actions.querySelector('button').onclick = () => chatActions.regenerate(index); container.appendChild(actions); } } container.appendChild(bubble); dom.chatMessages.appendChild(container); dom.chatMessages.scrollTop = dom.chatMessages.scrollHeight; return bubble; },
        toggleChatControls(isStreaming) { dom.chatPrompt.disabled = isStreaming; dom.activeModelSelect.disabled = isStreaming; dom.chatPresetSelect.disabled = isStreaming; dom.btnChatSend.innerHTML = isStreaming ? '<i class="fa-solid fa-stop"></i>' : '<i class="fa-solid fa-paper-plane"></i>'; dom.btnChatSend.classList.toggle('danger-btn', isStreaming); },
        setButtonLoading(button, isLoading) { if (!button) return; const icon = button.querySelector('i'); if (isLoading) { button.dataset.originalIcon = icon.className; icon.className = 'fa-solid fa-spinner fa-spin'; button.disabled = true; } else { if(button.dataset.originalIcon) icon.className = button.dataset.originalIcon; button.disabled = false; } },
    };
    const chatActions = {
        async send() { if (state.chat.isStreaming) return; const prompt = dom.chatPrompt.value.trim(); const model = dom.activeModelSelect.value; const presetId = dom.chatPresetSelect.value; if (!prompt || !model || model === 'No models installed' || !state.server.responsive) return showToast('Please select a model, enter a prompt, and ensure the server is running.', 'error'); if (!state.chat.currentId) { await this.new(); if (!state.chat.currentId) return showToast('Error creating new chat session.', 'error'); } const preset = state.settings.presets.find(p => p.id === presetId); if (!preset) return showToast('Selected preset not found.', 'error'); const isFirstMessage = state.chat.messages.length === 0; const userMessage = { role: 'user', content: prompt }; app.setState(s => ({ ...s, chat: { ...s.chat, messages: [...s.chat.messages, userMessage], isStreaming: true } }), 'chat'); dom.chatPrompt.value = ''; dom.chatPrompt.dispatchEvent(new Event('input')); ui.toggleChatControls(true); ui.addChatMessage({}, 0, true); if (isFirstMessage) this.generateTitle(prompt); const conversationHistory = state.chat.messages.slice(-10); const messagesForApi = [...conversationHistory]; if (preset.system) messagesForApi.unshift({role: 'system', content: preset.system}); api.startStream({ task_type: 'chat', data: { model, messages: messagesForApi, options: { temperature: parseFloat(preset.temperature), repeat_penalty: parseFloat(preset.repeat_penalty), top_k: parseInt(preset.top_k), top_p: parseFloat(preset.top_p) } } }); },
        async regenerate(messageIndex) { if (state.chat.isStreaming) return; const truncatedMessages = state.chat.messages.slice(0, messageIndex); const lastUserMessage = truncatedMessages.filter(m => m.role === 'user').pop(); if (!lastUserMessage) return showToast('Cannot find a user message to regenerate from.', 'error'); app.setState(s => ({ ...s, chat: {...s.chat, messages: truncatedMessages } }), 'chat'); dom.chatPrompt.value = lastUserMessage.content; this.send(); },
        async generateTitle(prompt) { app.setState(s => ({...s, chat: {...s.chat, isGeneratingTitle: true, titleStreamContent: ''}})); const titleModel = state.settings.title_generation_model || 'llama3:latest'; const titlePrompt = `Analyze the following user query and create a very short, concise title for the conversation (4-6 words max). The title should be plain text, without quotes or labels. Query: "${prompt}"`; api.startStream({ task_type: 'generate_title', data: { model: titleModel, messages: [{role:'user', content: titlePrompt}] } }); },
        async new() { const res = await api.call('create_chat'); if (res?.status === 'success') { app.setState(s => ({...s, chat: {...s.chat, currentId: res.chat.id, messages: [], metadata: {}}}), 'chat'); await this.refreshHistory(); } },
        async load(id) { if(state.chat.isStreaming) return; const chatData = await api.call('get_chat', { id }); if (chatData) { app.setState(s => ({...s, chat: {...s.chat, currentId: id, messages: chatData.messages || [], metadata: chatData.metadata || {}}}), 'chat'); if(state.chat.metadata.model) dom.activeModelSelect.value = state.chat.metadata.model; if(state.chat.metadata.preset_id) dom.chatPresetSelect.value = state.chat.metadata.preset_id; } },
        async rename(id, oldTitle) { const newTitle = prompt("Enter new name for chat:", oldTitle); if (newTitle && newTitle.trim() !== oldTitle) { await api.call('update_chat', { id, title: newTitle.trim() }); await this.refreshHistory(); } },
        async delete(id) { if (!confirm('Delete this chat?')) return; const res = await api.call('delete_chat', {id}); if (res?.status === 'success') { if (state.chat.currentId === id) await this.new(); else await this.refreshHistory(); showToast('Chat deleted.', 'success'); } },
        async clearAll() { const res = await api.call('clear_all_chats'); if (res?.status === 'success') { await this.new(); showToast(res.message, 'success'); } },
        async refreshHistory() { const history = await api.call('get_chat_list'); if (history) app.setState(s => ({...s, chat: {...s.chat, history}}), 'chat'); },
    };
    const streamActions = {
        stop() { if (state.currentStreamController) state.currentStreamController.close(); this.onComplete('manual_stop'); },
        onMessage(data, type) { if (type === 'chat') { const bubble = document.getElementById('streaming-bubble'); if (!bubble) return; if (data.message?.content) { if (bubble.querySelector('.thinking-cursor')) bubble.innerHTML = ''; bubble.append(document.createTextNode(data.message.content)); bubble.dataset.fullResponse = (bubble.dataset.fullResponse || '') + data.message.content; } else if (data.error) { bubble.innerHTML = `<p style="color: var(--accent-red);"><strong>Stream Error:</strong> ${DOMPurify.sanitize(data.error)}</p>`; this.onComplete('chat_error'); } dom.chatMessages.scrollTop = dom.chatMessages.scrollHeight; } else if (type === 'generate_title') { if (data.message?.content) app.setState(s => ({...s, chat: {...s.chat, titleStreamContent: s.chat.titleStreamContent + data.message.content}})); } else if (data.log) { dom.progressLog.textContent += data.log + '\n'; dom.progressLog.scrollTop = dom.progressLog.scrollHeight; } },
        async onComplete(type) { if (type === 'chat' || type === 'chat_error' || (type === 'manual_stop' && state.chat.isStreaming)) { app.setState(s => ({...s, chat: {...s.chat, isStreaming: false}})); ui.toggleChatControls(false); const bubble = document.getElementById('streaming-bubble'); if (bubble) { const fullResponse = bubble.dataset.fullResponse; if (fullResponse && type !== 'chat_error') { const assistantMessage = { role: 'assistant', content: fullResponse + (type === 'manual_stop' ? '\n\n*(Generation stopped by user.)*' : '') }; const currentMessages = state.chat.messages; app.setState(s => ({...s, chat: {...s.chat, messages: [...currentMessages, assistantMessage]}}), 'chat'); api.call('update_chat', { id: state.chat.currentId, messages: [...currentMessages, assistantMessage] }); } bubble.remove(); } } else if (type === 'generate_title') { const finalTitle = state.chat.titleStreamContent.replace(/["']/g, "").trim(); if (finalTitle) { app.setState(s => ({...s, chat: {...s.chat, isGeneratingTitle: false, metadata: {...s.chat.metadata, title: finalTitle}}})); await api.call('update_chat', { id: state.chat.currentId, title: finalTitle }); } await chatActions.refreshHistory(); } else { if (!['chat_error','error'].includes(type)) dom.progressLog.textContent += `\n--- TASK ${type === 'manual_stop' ? 'STOPPED' : 'COMPLETE'} ---`; dom.progressCloseBtn.style.display = 'inline-flex'; if(['pull_model', 'copy_model', 'start_and_import', 'purge_all'].includes(type)) { modelActions.refresh(type === 'pull_model' ? state.currentTaskData?.name : null); systemActions.refreshStatus(); } else { systemActions.refreshStatus(); } } state.currentStreamController = null; },
        onError(err) { this.onComplete(state.chat.isStreaming ? 'chat_error' : 'error'); console.error('Stream connection error:', err); },
    };
    const modelActions = {
        pull() { if (!state.server.responsive) return showToast('Ollama server must be running.', 'error'); const modelName = dom.pullModelForm.elements['pull-model-name'].value; state.currentTaskData = {name: modelName}; app.runStreamTask('pull_model', 'Pulling Model...', { name: modelName }); dom.pullModelForm.reset(); },
        async delete(name, button) { ui.setButtonLoading(button, true); try { const res = await api.call('delete_model', { name }); if (res) { showToast(res.message, res.status); await this.refresh(); } } finally { ui.setButtonLoading(button, false); } },
        async refresh(flashModelName = null) { const data = await api.call('get_models_state'); if (data) { if(flashModelName) data.installed_models.forEach(m => { if(m.name === flashModelName) m.flash = true; }); app.setState(s => ({...s, models: { ...s.models, installed: data.installed_models, running: data.running_models }}), ['models', 'server']); if(flashModelName) setTimeout(() => { app.setState(s => { const newModels = s.models.installed.map(m => ({...m, flash: false})); return {...s, models: {...s.models, installed: newModels}} }, 'models'); }, 1000); } },
        async showDetails(name) { showToast(`Fetching details for ${name}...`, 'info'); const res = await api.call('get_model_details', { name }); if (res?.status === 'success') { dom.modelDetailsTitle.textContent = name; dom.modelDetailsParams.textContent = res.details.details ? JSON.stringify(res.details.details, null, 2) : 'Not available.'; dom.modelDetailsModelfile.textContent = res.details.modelfile || 'Not available.'; dom.modelDetailsModal.classList.add('active'); } },
        showTagModal(name) { dom.tagModelSourceName.textContent = name; dom.tagModelDestination.value = ''; dom.tagModelModal.classList.add('active'); dom.tagModelDestination.focus(); },
        tag() { if (!state.server.responsive) return showToast('Ollama server must be running.', 'error'); const source = dom.tagModelSourceName.textContent; const dest = dom.tagModelDestination.value.trim(); if(!dest) return; dom.tagModelModal.classList.remove('active'); app.runStreamTask('copy_model', `Tagging ${source} as ${dest}`, { source, destination: dest }); },
        async uploadGGUF() { const file = dom.ggufFileInput.files[0]; if (!file) return; const formData = new FormData(); formData.append('ggufFile', file); showToast(`Uploading ${file.name}...`, 'info'); try { const res = await api.call('upload_gguf', formData, true); if(res) { showToast(res.message, res.status); if(res.status === 'success') this.refresh(); } } finally { dom.ggufFileInput.value = ''; } },
    };
    const settingsActions = {
        async saveAll() { const res = await api.call('save_settings', state.settings); if (res) { app.setState(s => ({...s, settings: res.settings}), 'settings'); showToast(res.message, res.status); dom.btnSavePreset.disabled = true; dom.presetDirtyIndicator.style.display = 'none'; } },
        async saveGlobal(button) { ui.setButtonLoading(button, true); try { app.setState(s => ({...s, settings: {...s.settings, api_password: dom.settingApiPassword.value, title_generation_model: dom.settingTitleModel.value}})); await this.saveAll(); } finally { ui.setButtonLoading(button, false); } },
        async savePreset(button) { ui.setButtonLoading(button, true); try { const presetId = dom.settingPresetSelect.value; app.setState(s => { const newPresets = s.settings.presets.map(p => p.id === presetId ? {...p, name: dom.settingsForm['setting-preset-name'].value, temperature: dom.settingsForm['setting-temperature'].value, repeat_penalty: dom.settingsForm['setting-repeat_penalty'].value, top_k: dom.settingsForm['setting-top_k'].value, top_p: dom.settingsForm['setting-top_p'].value, system: dom.settingsForm['setting-system'].value } : p); return {...s, settings: {...s.settings, presets: newPresets}}; }); await this.saveAll(); } finally { ui.setButtonLoading(button, false); } },
        async savePresetAsNew() { const newName = prompt("Enter name for new preset:", dom.settingsForm['setting-preset-name'].value + " Copy"); if(!newName) return; const newPreset = { id: 'preset_' + Date.now(), name: newName, temperature: dom.settingsForm['setting-temperature'].value, repeat_penalty: dom.settingsForm['setting-repeat_penalty'].value, top_k: dom.settingsForm['setting-top_k'].value, top_p: dom.settingsForm['setting-top_p'].value, system: dom.settingsForm['setting-system'].value }; app.setState(s => ({...s, settings: {...s.settings, presets: [...s.settings.presets, newPreset], active_preset_id: newPreset.id }})); await this.saveAll(); },
        async deletePreset(button) { if (state.settings.presets.length <= 1) return showToast('Cannot delete the last preset.', 'error'); const presetId = dom.settingPresetSelect.value; if (confirm(`Delete this preset?`)) { ui.setButtonLoading(button, true); try { app.setState(s => { const newPresets = s.settings.presets.filter(p => p.id !== presetId); const newActiveId = s.settings.active_preset_id === presetId ? newPresets[0].id : s.settings.active_preset_id; return {...s, settings: {...s.settings, presets: newPresets, active_preset_id: newActiveId}}; }); await this.saveAll(); } finally { ui.setButtonLoading(button, false); } } },
        exportPresets() { const blob = new Blob([JSON.stringify(state.settings.presets, null, 2)], {type: 'application/json'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'ollama-presets.json'; a.click(); URL.revokeObjectURL(url); },
        importPresets(file) { if(!file) return; const reader = new FileReader(); reader.onload = async (e) => { try { let imported = JSON.parse(e.target.result); if(!Array.isArray(imported)) throw new Error('Invalid format'); imported = imported.map(p => state.settings.presets.some(ep => ep.id === p.id) ? {...p, id: 'preset_' + Date.now() + Math.random()} : p); app.setState(s => ({...s, settings: {...s.settings, presets: [...s.settings.presets, ...imported]}})); await this.saveAll(); showToast('Presets imported!', 'success'); } catch(err) { showToast('Import failed: Invalid file.', 'error'); } }; reader.readAsText(file); },
    };
    const systemActions = {
        async runAutoAction(id) { app.runStreamTask('execute_auto_action', `Executing: ${id}`, {id}); },
        async runDiagnostics(button) { ui.setButtonLoading(button, true); try { const res = await api.call('run_diagnostics'); if(res) { dom.diagnosticsResults.innerHTML = ''; res.forEach(r => { const icons = {'OK':'check','WARN':'triangle-exclamation','FAIL':'circle-xmark','INFO':'circle-info'}; const item = document.createElement('div'); item.className = 'diag-item'; item.innerHTML = `<div class="diag-info"><strong>${r.check}</strong><span>Expected: ${r.expected} | Actual: ${r.actual ? 'Found/Enabled' : 'Not Found/Disabled'}</span></div><div class="diag-status"><i class="fa-solid fa-${icons[r.status]}"></i>${r.status}</div> ${r.fixable && r.status !== 'OK' ? `<div class="diag-action"><button data-fix-id="${r.fix_id}" class="warning-btn">Attempt Fix</button></div>` : ''}`; if (r.fixable && r.status !== 'OK') item.querySelector('button').onclick = () => this.runAutoAction(r.fix_id); dom.diagnosticsResults.appendChild(item); }); dom.diagnosticsResults.style.display = 'block'; } } finally { ui.setButtonLoading(button, false); } },
        async startServer() { app.runStreamTask('start_and_import', 'Starting Server & Syncing Models...'); },
        async stopServer() { await api.call('stop_server'); this.refreshStatus(); },
        async killAll() { await api.call('stop_all_tasks'); this.refreshStatus(); },
        async purgeAll() { await app.runStreamTask('purge_all', 'Purging All Installed Models...'); },
        async refreshStatus() { const status = await api.call('get_server_status'); if(status) app.setState(s => ({...s, server: {...s.server, ...status}}), 'server'); },
        refreshLog() { if(state.logStreamController) { dom.serverLogOutput.textContent = ''; } else { systemActions.startLogStream(); } },
        startLogStream() { if (state.logStreamController) state.logStreamController.close(); dom.serverLogOutput.textContent = 'Connecting to log stream...\n'; state.logStreamController = new EventSource('?action=stream_log'); state.logStreamController.onmessage = e => { const data = JSON.parse(e.data); if (data.append) { dom.serverLogOutput.textContent += data.log + '\n'; } else { dom.serverLogOutput.textContent = data.log + '\n'; } dom.serverLogOutput.scrollTop = dom.serverLogOutput.scrollHeight; }; },
        stopLogStream() { if (state.logStreamController) { state.logStreamController.close(); state.logStreamController = null; } },
    };
    function showToast(message, type = 'success') { clearTimeout(window.toastTimer); const toast = dom.toast; toast.textContent = message; toast.style.backgroundColor = `var(--accent-${type === 'error' ? 'red' : type === 'info' ? 'blue' : 'green'})`; toast.style.opacity = 1; toast.style.visibility = 'visible'; window.toastTimer = setTimeout(() => { toast.style.opacity = 0; toast.style.visibility = 'hidden'; }, 4000); }
    app.init();
});
</script>
</body>
</html>
